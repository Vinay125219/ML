version: '3.8'

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: mlops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mlops-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mlops-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - mlops-network
    depends_on:
      - prometheus

  # Housing Price Prediction API
  housing-api:
    build: .
    container_name: mlops-housing-api
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./housinglogs:/app/housinglogs
    environment:
      - PYTHONPATH=/app
    command: uvicorn api.housing_api:app --host 0.0.0.0 --port 8000
    networks:
      - mlops-network
    depends_on:
      - prometheus

  # Iris Classification API
  iris-api:
    build: .
    container_name: mlops-iris-api
    ports:
      - "8001:8001"
    volumes:
      - ./models:/app/models
      - ./irislogs:/app/irislogs
    environment:
      - PYTHONPATH=/app
    command: uvicorn api.main:app --host 0.0.0.0 --port 8001
    networks:
      - mlops-network
    depends_on:
      - prometheus

  # Model Retraining Service
  retraining-service:
    build: .
    container_name: mlops-retraining
    ports:
      - "8002:8002"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./housinglogs:/app/housinglogs
      - ./irislogs:/app/irislogs
      - ./mlruns:/app/mlruns
    environment:
      - PYTHONPATH=/app
    command: python src/retraining_scheduler.py
    networks:
      - mlops-network
    depends_on:
      - housing-api
      - iris-api

  # MLflow Tracking Server
  mlflow:
    image: python:3.10-slim
    container_name: mlops-mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/app/mlruns
    working_dir: /app
    command: >
      bash -c "pip install mlflow &&
               mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri file:///app/mlruns"
    networks:
      - mlops-network

  # Auto-open browser after all services are ready (Windows & Linux)
  open-browser:
    image: alpine:latest
    container_name: mlops-open-browser
    depends_on:
      - housing-api
      - iris-api
      - retraining-service
      - mlflow
      - grafana
      - prometheus
    command: >
      sh -c "
      apk add --no-cache curl bash &&
      until curl -s http://housing-api:8000/health > /dev/null; do echo 'Waiting for Housing API...'; sleep 2; done &&
      until curl -s http://iris-api:8001/health > /dev/null; do echo 'Waiting for Iris API...'; sleep 2; done &&
      until curl -s http://mlflow:5000 > /dev/null; do echo 'Waiting for MLflow...'; sleep 2; done &&
      until curl -s http://grafana:3001 > /dev/null; do echo 'Waiting for Grafana...'; sleep 2; done &&
      until curl -s http://prometheus:9090 > /dev/null; do echo 'Waiting for Prometheus...'; sleep 2; done &&
      if grep -qi microsoft /proc/version; then
        echo 'Opening browser on Windows...' &&
        powershell.exe start http://localhost:8000 http://localhost:8001 http://localhost:8002 http://localhost:5000 http://localhost:3000 http://localhost:9090;
      else
        echo 'Opening browser on Linux...' &&
        xdg-open http://localhost:8000 &&
        xdg-open http://localhost:8001 &&
        xdg-open http://localhost:8002 &&
        xdg-open http://localhost:5000 &&
        xdg-open http://localhost:3001 &&
        xdg-open http://localhost:9090;
      fi
      "
    networks:
      - mlops-network

volumes:
  prometheus_data:
  grafana_data:

networks:
  mlops-network:
    driver: bridge
